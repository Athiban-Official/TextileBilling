package Hexabill;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Fatmicky
 */
public class POS_Setting extends javax.swing.JFrame {

    /**
     * Creates new form POS_Setting
     */
    public POS_Setting() {
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        populateComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    Connection con1;
    PreparedStatement insert;
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboBox = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel1.setText("POS Merchant Name");

        comboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxActionPerformed(evt);
            }
        });

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Reset");

        jButton3.setText("Close");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(175, 175, 175))
            .addGroup(layout.createSequentialGroup()
                .addGap(163, 163, 163)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(336, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(220, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxActionPerformed

    }//GEN-LAST:event_comboBoxActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
          /*  try {                                         
                // TODO add your handling code here:
                String mname = comboBox.getSelectedItem().toString();

                Class.forName("com.mysql.cj.jdbc.Driver");
                con1 = DriverManager.getConnection("jdbc:mysql://localhost/hexabilling","root","");

                // Set autocommit to false
                con1.setAutoCommit(false);

                // Create the PreparedStatement for the update query
                insert = con1.prepareStatement("UPDATE pos_metchant_name SET Merchant_Name=? WHERE Merchant_Name=? ");
                String Merchant_Name = null;
                insert.setString(1, Merchant_Name);  // Set the new merchant name here
                insert.setString(2, mname);  // Set the old merchant name here
                insert.executeUpdate();
                // Commit the transaction
                con1.commit();

                // Set autocommit back to true
                con1.setAutoCommit(true);
                System.out.println(insert);

                JOptionPane.showMessageDialog(this, "Product Updated Successfully");
            } catch (ClassNotFoundException | SQLException ex) {
                try {
                    con1.rollback();
                } catch (SQLException rollbackEx) {
                    // Handle rollback exception if needed
                    rollbackEx.printStackTrace();
                }
                Logger.getLogger(POS_Setting.class.getName()).log(Level.SEVERE, null, ex);
            } */
          
          PosSvaeBtn();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void PosSvaeBtn(){
        
             String selectedValue = (String) comboBox.getSelectedItem();
             if (selectedValue != null) {
                    // Check if the value already exists in the selected_values table
                    if (isValueExists(selectedValue)) {
                        // If it exists, update the existing row
                        updateValue(selectedValue);
                        JOptionPane.showMessageDialog(null, "Value updated successfully.");
                    } else {
                        // If it doesn't exist, insert the value into the table
                        insertValue(selectedValue);
                        JOptionPane.showMessageDialog(null, "Value inserted successfully.");
                    }
                    
                 //   SellingProducts sellingProducts = new SellingProducts();
                   // sellingProducts.setMerchantName(selectedValue);
                    
                }
    }
    
    private boolean isValueExists(String value) {
        // Check if the value exists in the selected_values table
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/hexabilling", "root", "");
            PreparedStatement statement = connection.prepareStatement("SELECT * FROM pos_merchant_name WHERE Merchant_Name = ?");
            statement.setString(1, value);
            ResultSet resultSet = statement.executeQuery();
            boolean exists = resultSet.next();
            connection.close();
            return exists;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
    
        private void updateValue(String value) {
        // Update the existing row with the selected value in the selected_values table
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/hexabilling", "root", "");
            PreparedStatement statement = connection.prepareStatement("UPDATE pos_merchant_name SET Merchant_Name = ? WHERE Merchant_Name = ?");
            statement.setString(1, value);
            statement.setString(2, value);
            statement.executeUpdate();
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

private void insertValue(String value) {
    int uniqueId = generateUniqueId();

    try {
        Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/hexabilling", "root", "");
        PreparedStatement statement = connection.prepareStatement("INSERT INTO pos_merchant_name (id, Merchant_Name) VALUES (?, ?)");
        statement.setInt(1, uniqueId);
        statement.setString(2, value);
        statement.executeUpdate();
        connection.close();
    } catch (SQLIntegrityConstraintViolationException e) {
        // Handle the duplicate key error here, e.g., generate a new uniqueId and retry the insertion
        uniqueId = generateUniqueId();
        insertValue(value); // Retry the insertion with the new uniqueId
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

private int generateUniqueId() {
    // Generate a unique 'id' value (e.g., using a timestamp)
    return (int) System.currentTimeMillis();
}


    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(POS_Setting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>
            

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new POS_Setting().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    private void populateComboBox() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/hexabilling", "root", "");
            PreparedStatement ps = con.prepareStatement("SELECT * FROM merchant_conf");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String itemName = rs.getString("Merchant_Name");
                comboBox.addItem(itemName);
            }

            rs.close();
            ps.close();
            con.close();
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(SellingProducts.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
}
